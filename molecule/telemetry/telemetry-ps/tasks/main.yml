---
# This playbook does following:
#   enables Percona testing repository
#   installs latest version of PS 8.0, PT and PXB 8.0
#   does some tests

# Cosmic is still missing python
# import_playbook: test_prep.yml

  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: disable the mysql module on RHEL/CentOS 8
    command: /usr/bin/dnf module disable mysql -y
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: setup epel 7 repo
    yum: name=epel-release state=present
    when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7") or (ansible_distribution == "Amazon" and ansible_distribution_major_version == "2")

  # - name: Copy telemetry agent binary
  #   ansible.builtin.copy:
  #     src: /home/eleonora.zinchenko/telemetry-agent/bin/telemetry-agent
  #     dest: telemetry-agent
  #     mode: '777'

  - name: enforce SELinux on CentOS
    selinux:
      policy: targeted
      state: enforcing
    when: ansible_os_family == "RedHat"

  # - name: enforce SELinux on CentOS
  #   command: setenforce 1
  #   when: ansible_os_family == "RedHat" and ansible_distribution != "Amazon"

  - name: Reboot machine to apply fips mode
    reboot:
    when: ansible_distribution == "Amazon"

  - name: get selinux status
    command: sestatus
    register: selinux_status
    when: ansible_os_family == "RedHat"

  - name: list selinux status
    debug:
      var: selinux_status
    when: ansible_os_family == "RedHat"

  - name: install policycoreutils-python
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - policycoreutils-python
    when: (ansible_distribution == "Amazon")

  - name: Allow mysql to listen on tcp port 33061
    community.general.seport:
      ports: 33061
      proto: tcp
      setype: mysqld_port_t
      state: present
    when: ansible_os_family == "RedHat"
# semanage port -a -t mysqld_port_t -p tcp 33061

#   - name: download and extract world database
#     command: "{{ item }}"
#     with_items:
#     - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

# # Disable Percona Toolkit installation till its supported in OL9 and Jammy
# #  - name: install Percona Toolkit new deb packages
# #    include_tasks: ../tasks/install_pt.yml
#   - name: include playbook for removing Percona repo
#     include_tasks: ../tasks/remove_percona_repository.yml

  - name: Install percona release
    include_tasks: ../../../../tasks/install_percona-release.yml

#   - name: Update cache
#     command: apt update
#     when: ansible_os_family == "Debian"

  # - name: install Telemetry Agent deb packages
  #   apt:
  #     name: "{{ packages }}"
  #     update_cache: yes
  #     state: latest
  #   vars:
  #     packages:
  #     - percona-telemetry-agent
  #   when: ansible_os_family == "Debian"

  # - name: install Telemetry Agent rpm packages
  #   yum:
  #     name: "{{ packages }}"
  #     state: latest
  #     update_cache: yes
  #   vars:
  #     packages:
  #     - percona-telemetry-agent
  #   when: ansible_os_family == "RedHat"

  # - name: disable percona-release tools experimental
  #   command: percona-release disable tools experimental

  # - name: enable the proxysql repo
  #   command: percona-release enable proxysql

  # - name: install Percona Server deb packages
  #   apt:
  #     name: "{{ packages }}"
  #     update_cache: yes
  #     state: latest
  #   vars:
  #     packages:
  #     - proxysql2
  #   when: ansible_os_family == "Debian"

  # - name: install Percona Server rpm packages
  #   yum:
  #     name: "{{ packages }}"
  #     state: latest
  #     update_cache: yes
  #   vars:
  #     packages:
  #     - proxysql2
  #   when: ansible_os_family == "RedHat"

# ## UPGRADE

#   - name: enable the pdps-8.0.35 experimental
#     command: percona-release enable-only pdps-8.0.35

#   - name: enable the ps-80 experimental
#     command: percona-release enable-only ps-80 experimental

#   - name: enable percona-release telemetry experimental
#     command: percona-release enable telemetry experimental

#   - name: install Percona Server and backup deb packages
#     apt:
#       name: "{{ packages }}"
#       update_cache: yes
#       state: latest
#     vars:
#       packages:
#       - percona-server-server
#       - percona-server-test
#       - percona-server-source
#       - percona-server-client
#       - percona-server-rocksdb
#       - percona-mysql-router
# #      - percona-mysql-shell
#     when: ansible_os_family == "Debian"

#   - name: install Percona Server and backup rpm packages
#     yum:
#       name: "{{ packages }}"
#       state: latest
#       update_cache: yes
#     vars:
#       packages:
#       - percona-server-server
#       - percona-server-test
#       - percona-server-client
#       - percona-server-rocksdb
#       - percona-mysql-router
# #      - percona-mysql-shell
#     when: ansible_os_family == "RedHat"

#   - name: start mysql service
#     service: name=mysql state=started

#   - name: set root password on centos
#     command: /package-testing/setpass_57.sh
#     when: ansible_os_family == "RedHat"

#   - name: restart mysql service
#     service: name=mysql state=restarted

#   - name: install AppArmor utils for deb
#     apt:
#       name: "{{ packages }}"
#       update_cache: yes
#       state: latest
#     vars:
#       packages:
#         - apparmor-utils
#     when: ansible_os_family == "Debian"

#   - name: enforce Apprmor  on DEB
#     command: aa-enforce /usr/sbin/mysqld
#     when: ansible_os_family == "Debian"

#   - name: append include for Debian
#     lineinfile:
#         path: /etc/apparmor.d/usr.sbin.mysqld
#         line: '#somecustomtext'
#     when: ansible_os_family == "Debian"

# ## UPGRADE

  - name: enable the ps-80 experimental
    command: percona-release enable-only ps-80 experimental

  - name: enable percona-release telemetry experimental
    command: percona-release enable telemetry experimental

  - name: install Percona Server and backup deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-source
      - percona-server-client
      - percona-server-rocksdb
      - percona-mysql-router
#      - percona-mysql-shell
    when: ansible_os_family == "Debian"

  - name: install Percona Server and backup rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-client
      - percona-server-rocksdb
      - percona-mysql-router
#      - percona-mysql-shell
    when: ansible_os_family == "RedHat"

  - name: install Percona Server and backup rpm packages
    debug:
      msg: "Main finished"

#   - name: enable percona-release original
#     command: percona-release enable original

# Temporarily for experimental only
  - name: enable the pdps-8.0.36 
    command: percona-release enable pdps-8.0.36 

  - name: install Percona Server and backup deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-toolkit
      - percona-mysql-shell
    when: ansible_os_family == "Debian"

  - name: install Percona Server and backup rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-toolkit
      - percona-mysql-shell
    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service: name=mysql state=started

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service: name=mysql state=restarted

  - name: install AppArmor utils for deb
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - apparmor-utils
    when: ansible_os_family == "Debian"

  - name: enforce Apprmor  on DEB
    command: aa-enforce /usr/sbin/mysqld
    when: ansible_os_family == "Debian"

  - name: Add log-error-verbosity option
    blockinfile:
      path: /etc/my.cnf
      insertafter: EOF
      block: |
        early_plugin_load=keyring_file.so
        log-error-verbosity=3
    when: 
        - ansible_os_family == "RedHat"

  - name: Add fips_mode option
    blockinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      insertafter: EOF
      block: |
        early_plugin_load=keyring_file.so
        log-error-verbosity=3
    when: 
        - ansible_os_family == "Debian"

  - name: copy the GR config file on Debian/Ubuntu
    template: src=../../../../templates/group_replication.j2 dest=/etc/mysql/conf.d/gr.cnf
    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

  - name: copy the GR config file on RHEL/CentOS/Amazon
    template: src=../../../../templates/group_replication.j2 dest=/etc/my.cnf.d/gr.cnf
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service: name=mysql state=restarted

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: re-run ps_admin to install rocksdb
    command: /usr/bin/ps-admin --enable-rocksdb

  - name: install plugins, import world database
    command: /package-testing/plugins_test_80.sh ps

  - name: install audit_log v2 plugin
    command: mysql -uroot -NBe "source /usr/share/mysql/audit_log_filter_linux_install.sql;"

  - name: Update the DB engine
    command: mysql -uroot -NBe "USE world3;create table r1 (id int, foo char(25)) engine=rocksdb;insert into r1 (id,foo) values (1,'test'),(2,'wow'),(3,'q');"

  - name: enable the pdps-8.0.36
    command: percona-release enable pdps-8.0.36

  - name: install Orchestrator deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-orchestrator-cli
      - percona-orchestrator-client
      - percona-orchestrator
    when: ansible_os_family == "Debian"

  - name: install Orchestrator rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-orchestrator-cli
      - percona-orchestrator-client
      - percona-orchestrator
    when: ansible_os_family == "RedHat"


  - name: enable the pdpxc-8.0.35 testing
    command: percona-release enable pdpxc-8.0.35 testing

  - name: install percona-haproxy rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-haproxy
      - proxysql2
      - percona-xtrabackup-80
    when: ansible_os_family == "RedHat"

  - name: install percona-haproxy deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-haproxy
      - proxysql2
      - percona-xtrabackup-80
    when: ansible_os_family == "Debian"

  - name: enable the original repo
    command: percona-release enable original

  - name: install PMM client rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: install PMM client deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - pmm2-client
    when: ansible_os_family == "Debian"

  - name: Check apparmor content
    command: cat /etc/apparmor.d/usr.sbin.mysqld
    register: apparmor_content
    when: ansible_os_family == "Debian"

  - name: Debug apparmor content
    debug:
      var: apparmor_content
    when: ansible_os_family == "Debian"

  - name: Include mongo packages install
    include_tasks: ../playbooks/install_monga.yml

  - name: Include Percona PG install
    include_tasks: ../playbooks/install_pr_pg.yml

  # - name: Include Upstream PG install
  #   include_tasks: ../playbooks/install_up_pg.yml

  # - name: Include PS 57
  #   include_tasks: ../playbooks/install_up_pg.yml

#  - block:
#      - name: run pytest
#        command: python3 -m pytest -v /package-testing/telemetry/tests_pillar/test_telemetry_pillar.py
#        register: pytest_out
#        no_log: True
#    always:
#      - name: debug pytest stderr
#        debug:
#          var: pytest_out.stderr_lines
#
#      - name: debug pytest stdout
#        debug:
#          var: pytest_out.stdout_lines

  # - name: setup repl
  #   command: "{{ item }}"
  #   with_items:
  #   - /usr/sbin/mysqld --no-defaults --initialize-insecure --datadir=$HOME/server_1/
  #   - /usr/sbin/mysqld --no-defaults --datadir=$HOME/server_1/ --port=21000 --socket=/tmp/mysql_21000.sock --max-connections=1024 --log-error --general-log --log-error-verbosity=3 --report-host=127.0.0.1 --server-id=2&
  #   - mysql -u root -e "create user 'repl'@'%' IDENTIFIED WITH mysql_native_password BY 'xyzzy';GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'repl'@'%';"
  #   - mysql -e -S/tmp/mysql_21000.sock "stop slave; CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_USER='repl', MASTER_PASSWORD='xyzzy',MASTER_PORT=3600, MASTER_LOG_FILE='binlog.000001';start slave;"


