---
# This playbook sets up the PXC node from testing repo

- hosts: all
  become: true
  become_method: sudo

  tasks:
  # find vm ip so that it can be used in templates
  - debug: var=ansible_all_ipv4_addresses
  - set_fact:
      man_ip: "{{ item }}"
    with_items: "{{ ansible_all_ipv4_addresses }}"
    when: "item.startswith('192.168')"
  - debug: var=man_ip

  - name: include tasks for test env setup
    include: ../tasks/test_prep.yml

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: include tasks for enabling test repo
    include_tasks: ../tasks/enable_pxc80_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_pxc80_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_pxc80_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

# - name: disable selinux
#   selinux: 
#     policy: targeted
#     state: enforcing
#   when: ansible_os_family == "RedHat"

  - name: add firewall rules
    command: /sbin/iptables -I INPUT -s {{item}} -p tcp -j ACCEPT
    with_items:
    - 192.168.70.63
    - 192.168.70.62
    - 192.168.70.61
    when: ansible_os_family == "RedHat"

  - name: install PXC 8 deb pxc full packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
    register: packages_install_full
    when: ansible_os_family == "Debian"

  - name: debug packages install track
    debug: var=packages_install_full

  - name: check righs and ips
    command: "{{ item }}"
    with_items:
      - ls -l /etc/mysql/my.cnf
      - update-alternatives --get-selections
    register: files_result_01
    ignore_errors: yes

  - name: output results of check righs and ips after the PXC packages install
    debug: var=files_result_01

  - name: install PXC 8 deb pxc source packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-source
    register: packages_install_source
    when: ansible_os_family == "Debian"

  - name: debug packages install track
    debug: var=packages_install_source
    when: ansible_os_family == "Debian"

  - name: check righs and ips
    command: "{{ item }}"
    with_items:
      - ls -l /etc/mysql/my.cnf
      - update-alternatives --get-selections
    register: files_result_02
    ignore_errors: yes

  - name: output results of check righs and ips after the PXC SOURCE packages install
    debug: var=files_result_02

  - name: install PXC 8 deb PXB8 packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtrabackup-80
    register: packages_install_xb
    when: ansible_os_family == "Debian"

  - name: debug packages install track
    debug: var=packages_install_xb
    when: ansible_os_family == "Debian"

  - name: check righs and ips
    command: "{{ item }}"
    with_items:
      - ls -l /etc/mysql/my.cnf
      - update-alternatives --get-selections
    register: files_result_04
    ignore_errors: yes

  - name: output results of check righs and ips after the PT packages install
    debug: var=files_result_04

  - name: install PXC 8 deb PT packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-toolkit
    register: packages_install_pt
    when: ansible_os_family == "Debian"

  - name: debug packages install track
    debug: var=packages_install_pt
    when: ansible_os_family == "Debian"

  - name: check righs and ips
    command: "{{ item }}"
    with_items:
      - ls -l /etc/mysql/my.cnf
      - update-alternatives --get-selections
    register: files_result_03
    ignore_errors: yes

  - name: output results of check righs and ips after the PT packages install
    debug: var=files_result_03

  - name: install PXC 8 rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
      - percona-xtrabackup-80
    when: ansible_os_family == "RedHat"

  - name: copy PXC config on centos 7
    template: src=../templates/my_rpm_80.j2 
              dest=/etc/my.cnf
    when: ansible_os_family == "RedHat"

  - name: copy PXC config on debian/ubuntu
    template: src=../templates/my_8.j2
              dest=/etc/mysql/my.cnf
              mode=0640 owner=mysql group=root
    when: ansible_os_family == "Debian"

  - name: copy .my.cnf with credentials
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: copy pxc certs
    copy:
      src: ../support-files/certs/
      dest: /etc/mysql/certs/

  - name: check righs and ips
    command: "{{ item }}"
    with_items:
      - ls -l /etc/mysql/my.cnf
      - ls -l /var/run/mysqld
      - update-alternatives --get-selections
    register: files_result_2
    ignore_errors: yes

  - name: output results of check righs and ips after copy of cnf
    debug: var=files_result_2

  - name: start mysql service
    service: name=mysql state=started
    register: command_result
    ignore_errors: yes

  - name: check righs and ips
    command: "{{ item }}"
    with_items:
      - ls -l /etc/mysql/my.cnf
      - ls -l /var/run/mysqld
      - update-alternatives --get-selections
    register: files_result_3
    ignore_errors: yes

  - name: output results of check righs and ips start/fail of the server
    debug: var=files_result_3

  - name: register PXC version
    shell: mysqld --version
    register: pxc_version
    when: lookup('env', 'check_version') != "yes" and lookup('env', 'check_version') != ""

  - name: print PXC version
    debug: var=pxc_version
    when: lookup('env', 'check_version') != "yes" and lookup('env', 'check_version') != ""

  - name: check that PXC version is correct
    command: /package-testing/version_check.sh pxc80
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

  - name: check that PXC package versions are correct
    command: /package-testing/package_check.sh pxc80
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

# - name: install plugins
#   command: /package-testing/plugins_test_80.sh pxc

  - name: run bats tests for mysql init scripts
    command: /usr/local/bin/bats /package-testing/bats/pxc-init-scripts.bats

  - name: start mysql service
    service: name=mysql state=started
