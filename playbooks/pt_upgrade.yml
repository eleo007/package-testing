---
# This playbook does following:
#   enables Percona main tools repository
#   installs Percona-Toolkit
#   enables Percona testing or experimental tools repository
#   updates Percona-Toolkit to the latest version

- hosts: all
  become: true
  become_method: sudo
#  vars:
#      client: "{{ lookup('env', 'install_repo') }}"
      #repo_name: "{{ lookup('env', 'repo_name') }}"

  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_only_main_repo_for_pt.yml
    vars:
      - repo_name: tools

#DEBUG check repos
  - name: check enabled repos
    command: percona-release show
    register: repo_list

  - name: output repos list
    debug:
      var: repo_list.stdout_lines
  #DEBUG check repos

#DEBUG list percona packages
  - name: list installed percona packages
    shell: apt list --installed|egrep -i "percona|mysql"
    register: packages_list
    when: ansible_os_family == "Debian"

  - name: output percona installed packages list
    debug:
      var: packages_list.stdout_lines
    when: ansible_os_family == "Debian"

  - name: list installed percona packages
    shell: yum list installed|egrep -i "percona|mysql"
    register: packages_list
    when: ansible_os_family == "RedHat"

  - name: output percona installed packages list
    debug:
      var: packages_list.stdout_lines
    when: ansible_os_family == "RedHat"
  #DEBUG list percona packages

  - name: include tasks for pt installation
    include_tasks: ../tasks/install_pt.yml

#DEBUG check repos
  - name: check enabled repos
    command: percona-release show
    register: repo_list

  - name: output repos list
    debug:
      var: repo_list.stdout_lines
  #DEBUG check repos

#DEBUG list percona packages
  - name: list installed percona packages
    shell: apt list --installed|egrep -i "percona|mysql"
    register: packages_list
    when: ansible_os_family == "Debian"

  - name: output percona installed packages list
    debug:
      var: packages_list.stdout_lines
    when: ansible_os_family == "Debian"

  - name: list installed percona packages
    shell: yum list installed|egrep -i "percona|mysql"
    register: packages_list
    when: ansible_os_family == "RedHat"

  - name: output percona installed packages list
    debug:
      var: packages_list.stdout_lines
    when: ansible_os_family == "RedHat"
  #DEBUG list percona packages

  - name: include tasks for enabling testing repo
    include_tasks: ../tasks/enable_only_testing_repo_for_pt.yml
    vars:
      - repo_name: tools
    when: lookup('env', 'install_repo') != "experimental"

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_only_experimental_repo_for_pt.yml
    vars:
      - repo_name: tools
    when: lookup('env', 'install_repo') == "experimental"

  - name: include tasks for pt installation
    include_tasks: ../tasks/install_pt.yml

#DEBUG check repos
  - name: check enabled repos
    command: percona-release show
    register: repo_list

  - name: output repos list
    debug:
      var: repo_list.stdout_lines
  #DEBUG check repos

#DEBUG list percona packages
  - name: list installed percona packages
    shell: apt list --installed|egrep -i "percona|mysql"
    register: packages_list
    when: ansible_os_family == "Debian"

  - name: output percona installed packages list
    debug:
      var: packages_list.stdout_lines
    when: ansible_os_family == "Debian"

  - name: list installed percona packages
    shell: yum list installed|egrep -i "percona|mysql"
    register: packages_list
    when: ansible_os_family == "RedHat"

  - name: output percona installed packages list
    debug:
      var: packages_list.stdout_lines
    when: ansible_os_family == "RedHat"
  #DEBUG list percona packages

# remove till the PT-1959 is fixed
  # - name: check that pt version is correct
  #   command: ../version_check.sh

  - name: remove pt packages
    include: ../tasks/remove_pt.yml