---
# This playbook does the following:
#   enables Percona testing repository
#   installs latest version of PS 8.0, PyKmip and runs some tests

- hosts: all
  become: true
  become_method: sudo

  tasks:
  # - name: Setup SSH keys CentOS
  #   authorized_key:
  #     user: centos
  #     key: "{{ lookup('file', 'public_keys') }}"
  #     state: present
  #     exclusive: False
  #   when: (ansible_distribution == "CentOS")

  # - name: Setup SSH keys for Oracle Linux or Amazon
  #   authorized_key:
  #     user: ec2-user
  #     key: "{{ lookup('file', 'public_keys') }}"
  #     state: present
  #     exclusive: False
  #   when: (ansible_distribution == "OracleLinux") or (ansible_distribution == "Amazon")

  # - name: Setup SSH keys Debian
  #   authorized_key:
  #     user: admin
  #     key: "{{ lookup('file', 'public_keys') }}"
  #     state: present
  #     exclusive: False
  #   when: (ansible_distribution == "Debian")

  # - name: Setup SSH keys Ubuntu
  #   authorized_key:
  #     user: ubuntu
  #     key: "{{ lookup('file', 'public_keys') }}"
  #     state: present
  #     exclusive: False
  #   when: (ansible_distribution == "Ubuntu")

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling PS 8 test repo
    include: ../tasks/enable_ps8_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS 8 test repo
    include: ../tasks/enable_ps8_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling PS 8 experimental repo
    include: ../tasks/enable_ps8_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: install Percona Server 8.0 packages
    include_tasks: ../tasks/install_ps80.yml

  - name: install sysbench new deb packages
    include_tasks: ../tasks/install_sysbench.yml
    when: lookup('env', 'install_repo') != "experimental"

  - name: list installed packages
    include_tasks: ../tasks/list_installed_packages.yml

  - name: stop mysql service
    service: name=mysql state=stopped

  - name: remove mysql data directory
    command: rm -r /var/lib/mysql

  - name: install python3-pip on RedHat/CentOS
    yum:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    register: pip_installation
    when: ansible_os_family == "RedHat"

  - name: Check pip3 install
    debug:
      var: pip_installation

  - name: install python3-pip on Debian/Ubuntu
    apt:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: install pykmip
    command: "{{ item }}"
    with_items:
        - python3 -m pip install -U pip
        - python3 -m pip install -U setuptools
        - python3 -m pip install -U pykmip

  - name: downgrade SQLAlchemy as new version doesn't work with pykmip
    command: pip3 install SQLAlchemy==1.4.46

  - name: start pykmip server
    shell: nohup /usr/local/bin/pykmip-server -f /package-testing/kmip/server.conf -l /pykmip_server.log 2>&1 &
    when: ansible_distribution != "Amazon"

  - name: start pykmip server for Amazon-Linux
    shell: nohup /usr/bin/pykmip-server -f /package-testing/kmip/server.conf -l /pykmip_server.log 2>&1 &
    when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"

  - name: copy the global manifest for mysql
    copy:
        src: /package-testing/kmip/mysqld.my
        dest: /usr/sbin/
        remote_src: yes

  - name: copy the global configuration file for mysql in Redhat/CentOS
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib64/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: copy the global configuration file for mysql in Debian/Ubuntu
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: copy the encryption config file on Debian/Ubuntu
    copy:
        src: /package-testing/kmip/encryption.j2
        dest: /etc/mysql/conf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

  - name: copy the encryption config file on RHEL/CentOS/Amazon
    copy:
        src: /package-testing/kmip/encryption.j2
        dest: /etc/my.cnf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service: name=mysql state=started
    ignore_errors: true

  - name: check pykmip log output
    shell: python3 --version
    register: python_version

  - name: check python version
    debug:
      var: python_version

  - name: check mysqld log output
    shell: cat /var/log/mysqld.log
    register: mysqld_log_debug
    ignore_errors: true

  - name: check mysqld output
    debug:
      var: mysqld_log_debug
    ignore_errors: true

  - name: check pykmip log output
    shell: cat /pykmip_server.log
    register: pykmip_log_debug

  - name: check  pykmip output
    debug:
      var: pykmip_log_debug
      
  # - name: Pause to log in the instance
  #   pause:
  #     minutes: 120

  - name: check mysql service status
    command: /package-testing/check_running.sh mysql running

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: check that Percona Server package versions are correct
    command: /package-testing/package_check.sh ps80

  - name: import world database
    command: /package-testing/plugins_test.sh
